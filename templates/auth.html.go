// Code generated by qtc from "auth.html". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line auth.html:1
package templates

//line auth.html:1
import "fmt"

//line auth.html:2
import "time"

//line auth.html:3
import "strconv"

//line auth.html:4
import "github.com/bakape/meguca/auth"

//line auth.html:5
import "github.com/bakape/meguca/lang"

//line auth.html:6
import "github.com/bakape/meguca/common"

// Header of a standalone HTML page

//line auth.html:9
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line auth.html:9
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line auth.html:9
func streamhtmlHeader(qw422016 *qt422016.Writer) {
//line auth.html:9
	qw422016.N().S(`<!DOCTYPE html><meta charset="utf-8"/>`)
//line auth.html:12
}

//line auth.html:12
func writehtmlHeader(qq422016 qtio422016.Writer) {
//line auth.html:12
	qw422016 := qt422016.AcquireWriter(qq422016)
//line auth.html:12
	streamhtmlHeader(qw422016)
//line auth.html:12
	qt422016.ReleaseWriter(qw422016)
//line auth.html:12
}

//line auth.html:12
func htmlHeader() string {
//line auth.html:12
	qb422016 := qt422016.AcquireByteBuffer()
//line auth.html:12
	writehtmlHeader(qb422016)
//line auth.html:12
	qs422016 := string(qb422016.B)
//line auth.html:12
	qt422016.ReleaseByteBuffer(qb422016)
//line auth.html:12
	return qs422016
//line auth.html:12
}

// BanPage renders a ban page for a banned user

//line auth.html:15
func StreamBanPage(qw422016 *qt422016.Writer, rec auth.BanRecord) {
//line auth.html:16
	streamhtmlHeader(qw422016)
//line auth.html:17
	ln := lang.Get().Templates["banPage"]

//line auth.html:18
	if len(ln) < 3 {
//line auth.html:19
		panic(fmt.Errorf("invalid ban format strings: %v", ln))

//line auth.html:20
	}
//line auth.html:21
	if rec.By == "system" && rec.Reason == "brum brum" {
//line auth.html:21
		qw422016.N().S(`<img src="/assets/autobahn.gif" style="position:fixed;top:0;left:0;width:100%;height:100%;z-index:-100;"/><audio src="/assets/autobahn.mp3" style="display:none" autoplay loop></audio>`)
//line auth.html:24
	}
//line auth.html:24
	qw422016.N().S(`<div class="ban-page glass">`)
//line auth.html:26
	qw422016.N().S(fmt.Sprintf(ln[0], bold(rec.Board), bold(rec.By)))
//line auth.html:26
	qw422016.N().S(`<br><br><b>`)
//line auth.html:30
	qw422016.E().S(rec.Reason)
//line auth.html:30
	qw422016.N().S(`</b><br><br>`)
//line auth.html:34
	exp := rec.Expires.Round(time.Second)

//line auth.html:35
	date := exp.Format(time.UnixDate)

//line auth.html:36
	till := exp.Sub(time.Now().Round(time.Second)).String()

//line auth.html:37
	qw422016.N().S(fmt.Sprintf(ln[1], bold(date), bold(till)))
//line auth.html:37
	qw422016.N().S(`<br><br>`)
//line auth.html:40
	qw422016.N().S(fmt.Sprintf(ln[2], bold(rec.IP)))
//line auth.html:40
	qw422016.N().S(`<br></div>`)
//line auth.html:43
}

//line auth.html:43
func WriteBanPage(qq422016 qtio422016.Writer, rec auth.BanRecord) {
//line auth.html:43
	qw422016 := qt422016.AcquireWriter(qq422016)
//line auth.html:43
	StreamBanPage(qw422016, rec)
//line auth.html:43
	qt422016.ReleaseWriter(qw422016)
//line auth.html:43
}

//line auth.html:43
func BanPage(rec auth.BanRecord) string {
//line auth.html:43
	qb422016 := qt422016.AcquireByteBuffer()
//line auth.html:43
	WriteBanPage(qb422016, rec)
//line auth.html:43
	qs422016 := string(qb422016.B)
//line auth.html:43
	qt422016.ReleaseByteBuffer(qb422016)
//line auth.html:43
	return qs422016
//line auth.html:43
}

// Renders a list of bans for a specific page with optional unbanning API links

//line auth.html:46
func StreamBanList(qw422016 *qt422016.Writer, bans []auth.BanRecord, board string, canUnban bool) {
//line auth.html:47
	StreamBoilerPlate(qw422016)
//line auth.html:48
	ln := lang.Get()

//line auth.html:48
	qw422016.N().S(`<form method="post" action="/api/unban/`)
//line auth.html:49
	qw422016.N().S(board)
//line auth.html:49
	qw422016.N().S(`"><table>`)
//line auth.html:51
	headers := []string{
		"reason", "by", "post", "ipHash", "expires", "type",
	}

//line auth.html:54
	if canUnban {
//line auth.html:55
		headers = append(headers, "unban")

//line auth.html:56
	}
//line auth.html:57
	streamtableHeaders(qw422016, headers...)
//line auth.html:58
	for _, b := range bans {
//line auth.html:58
		qw422016.N().S(`<tr><td>`)
//line auth.html:60
		qw422016.E().S(b.Reason)
//line auth.html:60
		qw422016.N().S(`</td><td>`)
//line auth.html:61
		qw422016.E().S(b.By)
//line auth.html:61
		qw422016.N().S(`</td><td>`)
//line auth.html:62
		streamstaticPostLink(qw422016, b.ForPost)
//line auth.html:62
		qw422016.N().S(`</td><td>`)
//line auth.html:63
		streamipHash(qw422016, b.IP)
//line auth.html:63
		qw422016.N().S(`</td><td>`)
//line auth.html:64
		qw422016.E().S(b.Expires.Format(time.UnixDate))
//line auth.html:64
		qw422016.N().S(`</td><td>`)
//line auth.html:65
		qw422016.E().S(ln.UI[b.Type])
//line auth.html:65
		qw422016.N().S(`</td>`)
//line auth.html:66
		if canUnban {
//line auth.html:66
			qw422016.N().S(`<td><input type="checkbox" name="`)
//line auth.html:68
			qw422016.E().S(strconv.FormatUint(b.ForPost, 10))
//line auth.html:68
			qw422016.N().S(`"></td>`)
//line auth.html:70
		}
//line auth.html:70
		qw422016.N().S(`</tr>`)
//line auth.html:72
	}
//line auth.html:72
	qw422016.N().S(`</table>`)
//line auth.html:74
	if canUnban {
//line auth.html:75
		streamsubmit(qw422016, false)
//line auth.html:76
	}
//line auth.html:76
	qw422016.N().S(`</form>`)
//line auth.html:78
}

//line auth.html:78
func WriteBanList(qq422016 qtio422016.Writer, bans []auth.BanRecord, board string, canUnban bool) {
//line auth.html:78
	qw422016 := qt422016.AcquireWriter(qq422016)
//line auth.html:78
	StreamBanList(qw422016, bans, board, canUnban)
//line auth.html:78
	qt422016.ReleaseWriter(qw422016)
//line auth.html:78
}

//line auth.html:78
func BanList(bans []auth.BanRecord, board string, canUnban bool) string {
//line auth.html:78
	qb422016 := qt422016.AcquireByteBuffer()
//line auth.html:78
	WriteBanList(qb422016, bans, board, canUnban)
//line auth.html:78
	qs422016 := string(qb422016.B)
//line auth.html:78
	qt422016.ReleaseByteBuffer(qb422016)
//line auth.html:78
	return qs422016
//line auth.html:78
}

//line auth.html:80
func streamipHash(qw422016 *qt422016.Writer, ip string) {
//line auth.html:81
	if ip == "" {
//line auth.html:82
		return
//line auth.html:83
	}
//line auth.html:85
	title, hash := auth.HashToTitle([]byte(ip))

//line auth.html:85
	qw422016.N().S(`<span title="`)
//line auth.html:86
	qw422016.N().S(hash)
//line auth.html:86
	qw422016.N().S(`">`)
//line auth.html:86
	qw422016.E().S(title)
//line auth.html:86
	qw422016.N().S(`</span>`)
//line auth.html:87
}

//line auth.html:87
func writeipHash(qq422016 qtio422016.Writer, ip string) {
//line auth.html:87
	qw422016 := qt422016.AcquireWriter(qq422016)
//line auth.html:87
	streamipHash(qw422016, ip)
//line auth.html:87
	qt422016.ReleaseWriter(qw422016)
//line auth.html:87
}

//line auth.html:87
func ipHash(ip string) string {
//line auth.html:87
	qb422016 := qt422016.AcquireByteBuffer()
//line auth.html:87
	writeipHash(qb422016, ip)
//line auth.html:87
	qs422016 := string(qb422016.B)
//line auth.html:87
	qt422016.ReleaseByteBuffer(qb422016)
//line auth.html:87
	return qs422016
//line auth.html:87
}

// Post link, that will redirect to the post from any page

//line auth.html:90
func streamstaticPostLink(qw422016 *qt422016.Writer, id uint64) {
//line auth.html:91
	streampostLink(qw422016, common.Link{id, id, "all"}, true, true)
//line auth.html:92
}

//line auth.html:92
func writestaticPostLink(qq422016 qtio422016.Writer, id uint64) {
//line auth.html:92
	qw422016 := qt422016.AcquireWriter(qq422016)
//line auth.html:92
	streamstaticPostLink(qw422016, id)
//line auth.html:92
	qt422016.ReleaseWriter(qw422016)
//line auth.html:92
}

//line auth.html:92
func staticPostLink(id uint64) string {
//line auth.html:92
	qb422016 := qt422016.AcquireByteBuffer()
//line auth.html:92
	writestaticPostLink(qb422016, id)
//line auth.html:92
	qs422016 := string(qb422016.B)
//line auth.html:92
	qt422016.ReleaseByteBuffer(qb422016)
//line auth.html:92
	return qs422016
//line auth.html:92
}

// Renders a moderation log page

//line auth.html:95
func StreamModLog(qw422016 *qt422016.Writer, log []auth.ModLogEntry) {
//line auth.html:96
	StreamBoilerPlate(qw422016)
//line auth.html:97
	ln := lang.Get()

//line auth.html:97
	qw422016.N().S(`<table>`)
//line auth.html:99
	streamtableHeaders(qw422016, "type", "by", "post", "time", "data", "ipHash", "duration")
//line auth.html:100
	for _, l := range log {
//line auth.html:100
		qw422016.N().S(`<tr><td>`)
//line auth.html:103
		switch l.Type {
//line auth.html:104
		case common.BanPost:
//line auth.html:105
			qw422016.E().S(ln.UI["ban"])
//line auth.html:106
		case common.ShadowBinPost:
//line auth.html:107
			qw422016.E().S(ln.UI["shadowBin"])
//line auth.html:108
		case common.UnbanPost:
//line auth.html:109
			qw422016.E().S(ln.UI["unban"])
//line auth.html:110
		case common.DeletePost:
//line auth.html:111
			qw422016.E().S(ln.UI["deletePost"])
//line auth.html:112
		case common.DeleteImage:
//line auth.html:113
			qw422016.E().S(ln.UI["deleteImage"])
//line auth.html:114
		case common.SpoilerImage:
//line auth.html:115
			qw422016.E().S(ln.UI["spoilerImage"])
//line auth.html:116
		case common.LockThread:
//line auth.html:117
			qw422016.E().S(ln.Common.UI["lockThread"])
//line auth.html:118
		case common.DeleteBoard:
//line auth.html:119
			qw422016.E().S(ln.Common.UI["deleteBoard"])
//line auth.html:120
		case common.MeidoVision:
//line auth.html:121
			qw422016.E().S(ln.Common.UI["meidoVisionPost"])
//line auth.html:122
		case common.PurgePost:
//line auth.html:123
			qw422016.E().S(ln.UI["purgePost"])
//line auth.html:124
		case common.RedirectIP:
//line auth.html:125
			qw422016.E().S(ln.UI["redirectIP"])
//line auth.html:126
		case common.RedirectThread:
//line auth.html:127
			qw422016.E().S(ln.UI["redirectThread"])
//line auth.html:128
		}
//line auth.html:128
		qw422016.N().S(`</td><td>`)
//line auth.html:130
		qw422016.E().S(l.By)
//line auth.html:130
		qw422016.N().S(`</td><td>`)
//line auth.html:132
		if l.ID != 0 {
//line auth.html:133
			streamstaticPostLink(qw422016, l.ID)
//line auth.html:134
		}
//line auth.html:134
		qw422016.N().S(`</td><td>`)
//line auth.html:136
		qw422016.E().S(l.Created.Format(time.UnixDate))
//line auth.html:136
		qw422016.N().S(`</td><td>`)
//line auth.html:137
		qw422016.E().S(l.Data)
//line auth.html:137
		qw422016.N().S(`</td><td>`)
//line auth.html:138
		streamipHash(qw422016, l.IP)
//line auth.html:138
		qw422016.N().S(`</td><td>`)
//line auth.html:140
		if l.Length != 0 {
//line auth.html:141
			qw422016.E().S((time.Second * time.Duration(l.Length)).String())
//line auth.html:142
		}
//line auth.html:142
		qw422016.N().S(`</td></tr>`)
//line auth.html:145
	}
//line auth.html:145
	qw422016.N().S(`</table>`)
//line auth.html:147
}

//line auth.html:147
func WriteModLog(qq422016 qtio422016.Writer, log []auth.ModLogEntry) {
//line auth.html:147
	qw422016 := qt422016.AcquireWriter(qq422016)
//line auth.html:147
	StreamModLog(qw422016, log)
//line auth.html:147
	qt422016.ReleaseWriter(qw422016)
//line auth.html:147
}

//line auth.html:147
func ModLog(log []auth.ModLogEntry) string {
//line auth.html:147
	qb422016 := qt422016.AcquireByteBuffer()
//line auth.html:147
	WriteModLog(qb422016, log)
//line auth.html:147
	qs422016 := string(qb422016.B)
//line auth.html:147
	qt422016.ReleaseByteBuffer(qb422016)
//line auth.html:147
	return qs422016
//line auth.html:147
}
