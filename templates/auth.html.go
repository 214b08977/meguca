// Code generated by qtc from "auth.html". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line auth.html:1
package templates

//line auth.html:1
import "fmt"

//line auth.html:2
import "time"

//line auth.html:3
import "strconv"

//line auth.html:4
import "github.com/bakape/meguca/auth"

//line auth.html:5
import "github.com/bakape/meguca/config"

//line auth.html:6
import "github.com/bakape/meguca/lang"

//line auth.html:7
import "github.com/bakape/meguca/common"

//line auth.html:8
import "github.com/Chiiruno/meguca/common"

//line auth.html:9
import "github.com/bakape/mnemonics"

// Header of a standalone HTML page

//line auth.html:12
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line auth.html:12
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line auth.html:12
func streamhtmlHeader(qw422016 *qt422016.Writer) {
//line auth.html:12
	qw422016.N().S(`<!DOCTYPE html><html><head><meta charset="utf-8"/></head><body>`)
//line auth.html:19
}

//line auth.html:19
func writehtmlHeader(qq422016 qtio422016.Writer) {
//line auth.html:19
	qw422016 := qt422016.AcquireWriter(qq422016)
//line auth.html:19
	streamhtmlHeader(qw422016)
//line auth.html:19
	qt422016.ReleaseWriter(qw422016)
//line auth.html:19
}

//line auth.html:19
func htmlHeader() string {
//line auth.html:19
	qb422016 := qt422016.AcquireByteBuffer()
//line auth.html:19
	writehtmlHeader(qb422016)
//line auth.html:19
	qs422016 := string(qb422016.B)
//line auth.html:19
	qt422016.ReleaseByteBuffer(qb422016)
//line auth.html:19
	return qs422016
//line auth.html:19
}

// End of a standalone HTML page

//line auth.html:22
func streamhtmlEnd(qw422016 *qt422016.Writer) {
//line auth.html:22
	qw422016.N().S(`</body></html>`)
//line auth.html:25
}

//line auth.html:25
func writehtmlEnd(qq422016 qtio422016.Writer) {
//line auth.html:25
	qw422016 := qt422016.AcquireWriter(qq422016)
//line auth.html:25
	streamhtmlEnd(qw422016)
//line auth.html:25
	qt422016.ReleaseWriter(qw422016)
//line auth.html:25
}

//line auth.html:25
func htmlEnd() string {
//line auth.html:25
	qb422016 := qt422016.AcquireByteBuffer()
//line auth.html:25
	writehtmlEnd(qb422016)
//line auth.html:25
	qs422016 := string(qb422016.B)
//line auth.html:25
	qt422016.ReleaseByteBuffer(qb422016)
//line auth.html:25
	return qs422016
//line auth.html:25
}

// BanPage renders a ban page for a banned user

//line auth.html:28
func StreamBanPage(qw422016 *qt422016.Writer, rec auth.BanRecord) {
//line auth.html:29
	streamhtmlHeader(qw422016)
//line auth.html:30
	ln := lang.Get().Templates["banPage"]

//line auth.html:31
	if len(ln) < 3 {
//line auth.html:32
		panic(fmt.Errorf("invalid ban format strings: %v", ln))

//line auth.html:33
	}
//line auth.html:34
	if rec.By == "system" && strings.Contains("brum brum", rec.Reason) {
//line auth.html:34
		qw422016.N().S(`<img src="/assets/autobahn.gif" style="position:fixed;top:0;left:0;width:100%;height:100%;z-index:-100;"/><audio src="/assets/autobahn.mp3" style="display:none" autoplay loop></audio>`)
//line auth.html:37
	}
//line auth.html:37
	qw422016.N().S(`<div class="ban-page glass">`)
//line auth.html:39
	qw422016.N().S(fmt.Sprintf(ln[0], bold(rec.Board), bold(rec.By)))
//line auth.html:39
	qw422016.N().S(`<br><br><b>`)
//line auth.html:43
	qw422016.E().S(rec.Reason)
//line auth.html:43
	qw422016.N().S(`</b><br><br>`)
//line auth.html:47
	exp := rec.Expires.Round(time.Second)

//line auth.html:48
	date := exp.Format(time.UnixDate)

//line auth.html:49
	till := exp.Sub(time.Now().Round(time.Second)).String()

//line auth.html:50
	qw422016.N().S(fmt.Sprintf(ln[1], bold(date), bold(till)))
//line auth.html:50
	qw422016.N().S(`<br><br>`)
//line auth.html:53
	qw422016.N().S(fmt.Sprintf(ln[2], bold(rec.IP)))
//line auth.html:53
	qw422016.N().S(`<br></div>`)
//line auth.html:56
	streamhtmlEnd(qw422016)
//line auth.html:57
}

//line auth.html:57
func WriteBanPage(qq422016 qtio422016.Writer, rec auth.BanRecord) {
//line auth.html:57
	qw422016 := qt422016.AcquireWriter(qq422016)
//line auth.html:57
	StreamBanPage(qw422016, rec)
//line auth.html:57
	qt422016.ReleaseWriter(qw422016)
//line auth.html:57
}

//line auth.html:57
func BanPage(rec auth.BanRecord) string {
//line auth.html:57
	qb422016 := qt422016.AcquireByteBuffer()
//line auth.html:57
	WriteBanPage(qb422016, rec)
//line auth.html:57
	qs422016 := string(qb422016.B)
//line auth.html:57
	qt422016.ReleaseByteBuffer(qb422016)
//line auth.html:57
	return qs422016
//line auth.html:57
}

// Renders a list of bans for a specific page with optional unbanning API links

//line auth.html:60
func StreamBanList(qw422016 *qt422016.Writer, bans []auth.BanRecord, board string, canUnban bool) {
//line auth.html:61
	streamhtmlHeader(qw422016)
//line auth.html:62
	streamtableStyle(qw422016)
//line auth.html:63
	ln := lang.Get()

//line auth.html:63
	qw422016.N().S(`<form method="post" action="/api/unban/`)
//line auth.html:64
	qw422016.N().S(board)
//line auth.html:64
	qw422016.N().S(`"><table>`)
//line auth.html:66
	headers := []string{
		"reason", "by", "post", "posterID", "expires", "type",
	}

//line auth.html:69
	if canUnban {
//line auth.html:70
		headers = append(headers, "unban")

//line auth.html:71
	}
//line auth.html:72
	streamtableHeaders(qw422016, headers...)
//line auth.html:73
	salt := config.Get().Salt

//line auth.html:74
	for _, b := range bans {
//line auth.html:74
		qw422016.N().S(`<tr><td>`)
//line auth.html:76
		qw422016.E().S(b.Reason)
//line auth.html:76
		qw422016.N().S(`</td><td>`)
//line auth.html:77
		qw422016.E().S(b.By)
//line auth.html:77
		qw422016.N().S(`</td><td>`)
//line auth.html:78
		streamstaticPostLink(qw422016, b.ForPost)
//line auth.html:78
		qw422016.N().S(`</td>`)
//line auth.html:79
		buf := make([]byte, 0, len(salt)+len(b.IP))

//line auth.html:80
		buf = append(buf, salt...)

//line auth.html:81
		buf = append(buf, b.IP...)

//line auth.html:81
		qw422016.N().S(`<td>`)
//line auth.html:82
		qw422016.E().S(mnemonic.FantasyName(buf))
//line auth.html:82
		qw422016.N().S(`</td><td>`)
//line auth.html:83
		qw422016.E().S(b.Expires.Format(time.UnixDate))
//line auth.html:83
		qw422016.N().S(`</td><td>`)
//line auth.html:84
		qw422016.E().S(ln.UI[b.Type])
//line auth.html:84
		qw422016.N().S(`</td>`)
//line auth.html:85
		if canUnban {
//line auth.html:85
			qw422016.N().S(`<td><input type="checkbox" name="`)
//line auth.html:87
			qw422016.E().S(strconv.FormatUint(b.ForPost, 10))
//line auth.html:87
			qw422016.N().S(`"></td>`)
//line auth.html:89
		}
//line auth.html:89
		qw422016.N().S(`</tr>`)
//line auth.html:91
	}
//line auth.html:91
	qw422016.N().S(`</table>`)
//line auth.html:93
	if canUnban {
//line auth.html:94
		streamsubmit(qw422016, false)
//line auth.html:95
	}
//line auth.html:95
	qw422016.N().S(`</form>`)
//line auth.html:97
	streamhtmlEnd(qw422016)
//line auth.html:98
}

//line auth.html:98
func WriteBanList(qq422016 qtio422016.Writer, bans []auth.BanRecord, board string, canUnban bool) {
//line auth.html:98
	qw422016 := qt422016.AcquireWriter(qq422016)
//line auth.html:98
	StreamBanList(qw422016, bans, board, canUnban)
//line auth.html:98
	qt422016.ReleaseWriter(qw422016)
//line auth.html:98
}

//line auth.html:98
func BanList(bans []auth.BanRecord, board string, canUnban bool) string {
//line auth.html:98
	qb422016 := qt422016.AcquireByteBuffer()
//line auth.html:98
	WriteBanList(qb422016, bans, board, canUnban)
//line auth.html:98
	qs422016 := string(qb422016.B)
//line auth.html:98
	qt422016.ReleaseByteBuffer(qb422016)
//line auth.html:98
	return qs422016
//line auth.html:98
}

// Common style for plain html tables

//line auth.html:101
func streamtableStyle(qw422016 *qt422016.Writer) {
//line auth.html:101
	qw422016.N().S(`<style>table, th, td {border: 1px solid black;}.hash-link {display: none;}</style>`)
//line auth.html:110
}

//line auth.html:110
func writetableStyle(qq422016 qtio422016.Writer) {
//line auth.html:110
	qw422016 := qt422016.AcquireWriter(qq422016)
//line auth.html:110
	streamtableStyle(qw422016)
//line auth.html:110
	qt422016.ReleaseWriter(qw422016)
//line auth.html:110
}

//line auth.html:110
func tableStyle() string {
//line auth.html:110
	qb422016 := qt422016.AcquireByteBuffer()
//line auth.html:110
	writetableStyle(qb422016)
//line auth.html:110
	qs422016 := string(qb422016.B)
//line auth.html:110
	qt422016.ReleaseByteBuffer(qb422016)
//line auth.html:110
	return qs422016
//line auth.html:110
}

// Post link, that will redirect to the post from any page

//line auth.html:113
func streamstaticPostLink(qw422016 *qt422016.Writer, id uint64) {
//line auth.html:114
	streampostLink(qw422016, common.Link{id, id, "all"}, true, true)
//line auth.html:115
}

//line auth.html:115
func writestaticPostLink(qq422016 qtio422016.Writer, id uint64) {
//line auth.html:115
	qw422016 := qt422016.AcquireWriter(qq422016)
//line auth.html:115
	streamstaticPostLink(qw422016, id)
//line auth.html:115
	qt422016.ReleaseWriter(qw422016)
//line auth.html:115
}

//line auth.html:115
func staticPostLink(id uint64) string {
//line auth.html:115
	qb422016 := qt422016.AcquireByteBuffer()
//line auth.html:115
	writestaticPostLink(qb422016, id)
//line auth.html:115
	qs422016 := string(qb422016.B)
//line auth.html:115
	qt422016.ReleaseByteBuffer(qb422016)
//line auth.html:115
	return qs422016
//line auth.html:115
}

// Renders a moderation log page

//line auth.html:118
func StreamModLog(qw422016 *qt422016.Writer, log []auth.ModLogEntry) {
//line auth.html:119
	streamhtmlHeader(qw422016)
//line auth.html:120
	ln := lang.Get()

//line auth.html:121
	streamtableStyle(qw422016)
//line auth.html:121
	qw422016.N().S(`<table>`)
//line auth.html:123
	streamtableHeaders(qw422016, "type", "by", "post", "time", "data", "duration")
//line auth.html:124
	for _, l := range log {
//line auth.html:124
		qw422016.N().S(`<tr><td>`)
//line auth.html:127
		switch l.Type {
//line auth.html:128
		case common.BanPost:
//line auth.html:129
			qw422016.E().S(ln.UI["ban"])
//line auth.html:130
		case common.ShadowBinPost:
//line auth.html:131
			qw422016.E().S(ln.UI["shadowBin"])
//line auth.html:132
		case common.UnbanPost:
//line auth.html:133
			qw422016.E().S(ln.UI["unban"])
//line auth.html:134
		case common.DeletePost:
//line auth.html:135
			qw422016.E().S(ln.UI["deletePost"])
//line auth.html:136
		case common.DeleteImage:
//line auth.html:137
			qw422016.E().S(ln.UI["deleteImage"])
//line auth.html:138
		case common.SpoilerImage:
//line auth.html:139
			qw422016.E().S(ln.UI["spoilerImage"])
//line auth.html:140
		case common.LockThread:
//line auth.html:141
			qw422016.E().S(ln.Common.UI["lockThread"])
//line auth.html:142
		case common.DeleteBoard:
//line auth.html:143
			qw422016.E().S(ln.Common.UI["deleteBoard"])
//line auth.html:144
		case common.MeidoVision:
//line auth.html:145
			qw422016.E().S(ln.Common.UI["meidoVisionPost"])
//line auth.html:146
		case common.PurgePost:
//line auth.html:147
			qw422016.E().S(ln.UI["purgePost"])
//line auth.html:148
		}
//line auth.html:148
		qw422016.N().S(`</td><td>`)
//line auth.html:150
		qw422016.E().S(l.By)
//line auth.html:150
		qw422016.N().S(`</td><td>`)
//line auth.html:152
		if l.ID != 0 {
//line auth.html:153
			streamstaticPostLink(qw422016, l.ID)
//line auth.html:154
		}
//line auth.html:154
		qw422016.N().S(`</td><td>`)
//line auth.html:156
		qw422016.E().S(l.Created.Format(time.UnixDate))
//line auth.html:156
		qw422016.N().S(`</td><td>`)
//line auth.html:157
		qw422016.E().S(l.Data)
//line auth.html:157
		qw422016.N().S(`</td><td>`)
//line auth.html:159
		if l.Length != 0 {
//line auth.html:160
			qw422016.E().S((time.Second * time.Duration(l.Length)).String())
//line auth.html:161
		}
//line auth.html:161
		qw422016.N().S(`</td></tr>`)
//line auth.html:164
	}
//line auth.html:164
	qw422016.N().S(`</table>`)
//line auth.html:166
	streamhtmlEnd(qw422016)
//line auth.html:167
}

//line auth.html:167
func WriteModLog(qq422016 qtio422016.Writer, log []auth.ModLogEntry) {
//line auth.html:167
	qw422016 := qt422016.AcquireWriter(qq422016)
//line auth.html:167
	StreamModLog(qw422016, log)
//line auth.html:167
	qt422016.ReleaseWriter(qw422016)
//line auth.html:167
}

//line auth.html:167
func ModLog(log []auth.ModLogEntry) string {
//line auth.html:167
	qb422016 := qt422016.AcquireByteBuffer()
//line auth.html:167
	WriteModLog(qb422016, log)
//line auth.html:167
	qs422016 := string(qb422016.B)
//line auth.html:167
	qt422016.ReleaseByteBuffer(qb422016)
//line auth.html:167
	return qs422016
//line auth.html:167
}
